// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: comments.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (id, file_path, commit_hash, repo, line_start, line_end, char_start, char_end, author, body, resolved, user_id)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11
)
RETURNING id, file_path, repo, commit_hash, line_start, line_end, author, body, created_at, updated_at, resolved, char_start, char_end, user_id
`

type CreateCommentParams struct {
	FilePath   string
	CommitHash string
	Repo       string
	LineStart  int32
	LineEnd    int32
	CharStart  int32
	CharEnd    int32
	Author     string
	Body       string
	Resolved   sql.NullBool
	UserID     uuid.UUID
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.FilePath,
		arg.CommitHash,
		arg.Repo,
		arg.LineStart,
		arg.LineEnd,
		arg.CharStart,
		arg.CharEnd,
		arg.Author,
		arg.Body,
		arg.Resolved,
		arg.UserID,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.FilePath,
		&i.Repo,
		&i.CommitHash,
		&i.LineStart,
		&i.LineEnd,
		&i.Author,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Resolved,
		&i.CharStart,
		&i.CharEnd,
		&i.UserID,
	)
	return i, err
}

const getComment = `-- name: GetComment :one
SELECT id, file_path, repo, commit_hash, line_start, line_end, author, body, created_at, updated_at, resolved, char_start, char_end, user_id FROM comments WHERE id=$1
`

func (q *Queries) GetComment(ctx context.Context, id uuid.UUID) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.FilePath,
		&i.Repo,
		&i.CommitHash,
		&i.LineStart,
		&i.LineEnd,
		&i.Author,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Resolved,
		&i.CharStart,
		&i.CharEnd,
		&i.UserID,
	)
	return i, err
}

const getCommentsByRepo = `-- name: GetCommentsByRepo :many
SELECT id, file_path, repo, commit_hash, line_start, line_end, author, body, created_at, updated_at, resolved, char_start, char_end, user_id FROM comments WHERE (repo=$1)
`

func (q *Queries) GetCommentsByRepo(ctx context.Context, repo string) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByRepo, repo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.FilePath,
			&i.Repo,
			&i.CommitHash,
			&i.LineStart,
			&i.LineEnd,
			&i.Author,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Resolved,
			&i.CharStart,
			&i.CharEnd,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentsByRepoWithUsers = `-- name: GetCommentsByRepoWithUsers :many
SELECT 
    c.id,
    c.file_path,
    c.repo,
    c.commit_hash,
    c.line_start,
    c.line_end,
    c.char_start,
    c.char_end,
    c.author,
    c.body,
    c.created_at,
    c.updated_at,
    c.resolved,
    c.user_id,
    u.avatar as avatar_url
FROM comments c
LEFT JOIN users u ON c.user_id = u.id
WHERE c.repo = $1
ORDER BY c.created_at DESC
`

type GetCommentsByRepoWithUsersRow struct {
	ID         uuid.UUID
	FilePath   string
	Repo       string
	CommitHash string
	LineStart  int32
	LineEnd    int32
	CharStart  int32
	CharEnd    int32
	Author     string
	Body       string
	CreatedAt  sql.NullTime
	UpdatedAt  sql.NullTime
	Resolved   sql.NullBool
	UserID     uuid.UUID
	AvatarUrl  sql.NullString
}

func (q *Queries) GetCommentsByRepoWithUsers(ctx context.Context, repo string) ([]GetCommentsByRepoWithUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByRepoWithUsers, repo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsByRepoWithUsersRow
	for rows.Next() {
		var i GetCommentsByRepoWithUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.FilePath,
			&i.Repo,
			&i.CommitHash,
			&i.LineStart,
			&i.LineEnd,
			&i.CharStart,
			&i.CharEnd,
			&i.Author,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Resolved,
			&i.UserID,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentsByUser = `-- name: GetCommentsByUser :many
SELECT id, file_path, repo, commit_hash, line_start, line_end, author, body, created_at, updated_at, resolved, char_start, char_end, user_id FROM comments WHERE user_id=$1
`

func (q *Queries) GetCommentsByUser(ctx context.Context, userID uuid.UUID) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.FilePath,
			&i.Repo,
			&i.CommitHash,
			&i.LineStart,
			&i.LineEnd,
			&i.Author,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Resolved,
			&i.CharStart,
			&i.CharEnd,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
