// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, github_id, username, avatar, github_token)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4
)
RETURNING id, github_id, username, avatar, created_at, updated_at, github_token
`

type CreateUserParams struct {
	GithubID    int64
	Username    string
	Avatar      string
	GithubToken sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.GithubID,
		arg.Username,
		arg.Avatar,
		arg.GithubToken,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GithubID,
		&i.Username,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GithubToken,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, github_id, username, avatar, created_at, updated_at, github_token FROM users WHERE (github_id=$1)
`

func (q *Queries) GetUser(ctx context.Context, githubID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, githubID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GithubID,
		&i.Username,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GithubToken,
	)
	return i, err
}
